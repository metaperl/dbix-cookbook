package DBIx::Cookbook;

use warnings;
use strict;

our $VERSION = '0.01';


=head1 NAME

DBIx::Cookbook - executable cookbook code for DBI(-based ORMs)?

=head1 SYNOPSIS

   dbic_cmd distinct_count
   dbic_cmd grouping

=head1 DESCRIPTION

L<DBIx::Cookbook> is a working cookbook of code for L<DBI>-based ORMs. 
It is based on the Sakila database schema 
(L<http://dev.mysql.com/doc/sakila/en/sakila.html>). Currently, the
majority of code is for L<DBIx::Class> but all ORMs are encouraged to
contribute code so that comparisons can be made between various ORMs
for the same task. 

If you only want to read the code samples, then simply see L</RECIPES>. If you
want to run them on actual data, the see L</INSTALLATION>. And for those that
want to contribute more code, see L</CONTRIBUTING>.

=head1 RECIPES

The recipes section gives you a good overview of each
ORM's capabilities with fully-working code that you can actually run!

=head2 Searching

R is the most common CRUD operation. L<DBIx::Cookbook::Recipe::Searching> will
show you common search tasks.


=cut

=head1 INSTALLATION

=head2 Install the Sakila database into MySQL

The MySQL installation instructions:

L<http://dev.mysql.com/doc/sakila/en/sakila.html#sakila-installation>

are quite clear. Be sure to retain the MySQL login information because you
will need it for the next step.


=head2 Download DBIx::Cookbook from github and Configure

   git clone http://github.com/metaperl/dbix-cookbook.git

=head3 Configure DBIx::Cookbook::DBH

Edit F<lib/DBIx/Cookbook/DBH.pm>, setting the C<dsn>, C<username>, and
C<password> attributes of the class:

    package DBIx::Cookbook::DBH;
    
    use Moose;
    extends 'DBIx::DBH';
    
    has '+username' => (default => 'shootout');
    has '+password' => (default => 'shootout1');
    
    has '+dsn' => (
        default => sub {
            {
                driver => 'mysql',
                database => 'sakila',
                host   => 'localhost',
                port   => 3306,
            };
        }
    );
    
    has '+attr' => (default => sub { { RaiseError => 1 } } );

=head3 CPAN download?

If you downloaded and installed L<DBIx::Cookbook> from CPAN, then you will 
need to edit the database connection file which is
F</usr/local/share/perl/5.10.0/DBIx/Cookbook/DBH.pm>
on a standard Perl 5.10 install.

Suggestions are welcome on how to make the install/usage process
seamless across git and CPAN usage.

=head2 Run the Cookbook examples

For L<DBIx::Class>, you would execute F<scripts/dbic_cmd>:

  dbic_cmd complex_where
  dbic_cmd paged
  dbic_cmd subquery

etc.

=head1 CONTRIBUTING (another ORM)

It is highly desired to have code from as many ORMs as possible. In
this section we will review the steps to install another ORM
into L<DBIx::Cookbook>.

=head2 Rose::DB::Object

Let's see how I added L<Rose::DB::Object> to the Cookbook.

=head3 Create a command class

L<DBIx::Cookbook> uses L<MooseX::App::Cmd> to separate the mechanics
of scripting from command development. Let's copy
F<lib/DBIx/Cookbook/DBIC.pm> to
F<lib/DBIx/Cookbook/RDBO.pm> and modify it.

=head3 Write a ::Loader script

F<scripts/rdbo_loader> was used to scan the entire database for
entities and relations and store them in Perl classes

As a sidenote, I had to write a custom base class instead of
using the autogenerated base class so that the C<as_tree> method in
L<Rose::DB::Object::Helpers> was available to all row instances.

=head3 Write a command script

L<DBIx::Cookbook::RDBO::Command::fetch_all> is the command that I
implemented after writing the base command class and creating 
Rose::DB::Object classes for the database schema

=head3 Write a command

This time we copy F<lib/DBIx/Cookbook/DBIC/Command/fetch_all.pm> to 
F<lib/DBIx/Cookbook/DBIC/Command/fetch_all.pm> and modify it to load in
the Rose::DB::Object schema and fetch the results of the table.

=head2 DBIx::Skinny

A similar set of steps was followed for L<DBIx::Skinny>. I had some
problems getting it L<setup|http://groups.google.com/group/dbix-skinny/topics?start=>

but the Skinny crew was very helpful both via the google group and IRC
channel (as was Siracusa for RDBO).



=head1 AUTHOR

Terrence Brannon, C<< <metaperl at gmail.com> >>

=head2 Acknowledgements

=head3 DBIx::Skinny

Yoshimi Keiji, Atsushi Kobayashi, Ryo Mikake

=head3 Rose::DB::Object 

John Siracusa,

=head3 #perl-help

Dylan Hardison

=head3 Pod::Server

Writing all the docs for this would have been much harder to review and
debug without John Beppu's L<Pod::Server.>


=head1 SUPPORT

irc://irc.perl.org/#dbix-class - I can be found as 'metaperl' here

You can find documentation for this module with the perldoc command.

    perldoc DBIx::Cookbook


You can also look for information at:

=over 4

=item * RT: CPAN's request tracker / bug report system

L<http://rt.cpan.org/NoAuth/Bugs.html?Dist=DBIx-Cookbook>

=item * AnnoCPAN: Annotated CPAN documentation

L<http://annocpan.org/dist/DBIx-Cookbook>

=item * CPAN Ratings

L<http://cpanratings.perl.org/d/DBIx-Cookbook>

=item * Search CPAN

L<http://search.cpan.org/dist/DBIx-Cookbook/>

=back


=head1 ACKNOWLEDGEMENTS


=head1 LICENSE AND COPYRIGHT

Copyright 2010 Terrence Brannon.

This program is free software; you can redistribute it and/or modify it
under the terms of either: the GNU General Public License as published
by the Free Software Foundation; or the Artistic License.

See http://dev.perl.org/licenses/ for more information.


=cut

1; # End of DBIx::Cookbook
